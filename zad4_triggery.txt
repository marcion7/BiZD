-- Triggery
-- 1
CREATE OR REPLACE TRIGGER TRG_UsuniecieDepartamentu
AFTER DELETE ON departments
FOR EACH ROW
DECLARE PRAGMA AUTONOMOUS_TRANSACTION;
    v_ostatni_manager VARCHAR2(100);
BEGIN
    SELECT first_name || ' ' || last_name INTO v_ostatni_manager
    FROM employees
    WHERE department_id = :OLD.department_id
    AND manager_id IS NULL;

    INSERT INTO archiwum_departamentow (id, nazwa, data_zamkniecia, ostatni_manager)
    VALUES (:OLD.department_id, :OLD.department_name, SYSDATE, v_ostatni_manager);
    COMMIT;
END;
/

-- 2
CREATE SEQUENCE zlodziej_seq
INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER TRG_ZmianaWynagrodzenia
BEFORE INSERT OR UPDATE OF salary ON employees
FOR EACH ROW
DECLARE PRAGMA AUTONOMOUS_TRANSACTION;
    id_zlodzieja NUMBER;
BEGIN
    IF :NEW.salary < 2000 OR :NEW.salary > 26000 THEN
        SELECT zlodziej_seq.nextval INTO id_zlodzieja FROM dual;
        INSERT INTO zlodziej (id, uzytkownik, czas_zmiany) VALUES (id_zlodzieja, USER, SYSTIMESTAMP);
        COMMIT;
        RAISE_APPLICATION_ERROR(-20001, 'Wynagrodzenie nie mieści się w widełkach');
    END IF;
END;
/

--3
declare
 emp_id number;
begin
  select MAX(employee_id) + 1 into emp_id from Employees;
  If emp_id > 0 then
    begin
        execute immediate 'DROP SEQUENCE employee_id_seq';
    exception when others then
        null;
    end;
    execute immediate 'CREATE SEQUENCE employee_id_seq INCREMENT BY 1 START WITH ' || emp_id || ' NOCYCLE CACHE 20 NOORDER';
  end if;
end;
/
    
CREATE OR REPLACE TRIGGER TRG_AutoIncrementEmployeeId
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
    SELECT employee_id_seq.nextval INTO :NEW.employee_id FROM dual;
END;
/

--4
CREATE OR REPLACE TRIGGER TRG_BlockOperationsJobGrades
BEFORE INSERT OR UPDATE OR DELETE ON JOB_GRADES
BEGIN
    RAISE_APPLICATION_ERROR(-20001, 'Operacje na tabeli JOB_GRADES są zabronione');
END;
/

--5
CREATE OR REPLACE TRIGGER TRG_BlockSalaryChangesJobs
BEFORE UPDATE OF max_salary, min_salary ON jobs
FOR EACH ROW
BEGIN
    :NEW.max_salary := :OLD.max_salary;
    :NEW.min_salary := :OLD.min_salary;
END;
/